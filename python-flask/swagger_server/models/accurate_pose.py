# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.inaccurate_pose import InaccuratePose  # noqa: F401,E501
from swagger_server import util


class AccuratePose(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, dns: str=None, is_accurate: bool=None, taken_at: datetime=None, reference_scan: str=None):  # noqa: E501
        """AccuratePose - a model defined in Swagger

        :param id: The id of this AccuratePose.  # noqa: E501
        :type id: str
        :param dns: The dns of this AccuratePose.  # noqa: E501
        :type dns: str
        :param is_accurate: The is_accurate of this AccuratePose.  # noqa: E501
        :type is_accurate: bool
        :param taken_at: The taken_at of this AccuratePose.  # noqa: E501
        :type taken_at: datetime
        :param reference_scan: The reference_scan of this AccuratePose.  # noqa: E501
        :type reference_scan: str
        """
        self.swagger_types = {
            'id': str,
            'dns': str,
            'is_accurate': bool,
            'taken_at': datetime,
            'reference_scan': str
        }

        self.attribute_map = {
            'id': 'id',
            'dns': 'dns',
            'is_accurate': 'is_accurate',
            'taken_at': 'taken_at',
            'reference_scan': 'reference_scan'
        }
        self._id = id
        self._dns = dns
        self._is_accurate = is_accurate
        self._taken_at = taken_at
        self._reference_scan = reference_scan

    @classmethod
    def from_dict(cls, dikt) -> 'AccuratePose':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AccuratePose of this AccuratePose.  # noqa: E501
        :rtype: AccuratePose
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AccuratePose.


        :return: The id of this AccuratePose.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AccuratePose.


        :param id: The id of this AccuratePose.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def dns(self) -> str:
        """Gets the dns of this AccuratePose.


        :return: The dns of this AccuratePose.
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns: str):
        """Sets the dns of this AccuratePose.


        :param dns: The dns of this AccuratePose.
        :type dns: str
        """
        if dns is None:
            raise ValueError("Invalid value for `dns`, must not be `None`")  # noqa: E501

        self._dns = dns

    @property
    def is_accurate(self) -> bool:
        """Gets the is_accurate of this AccuratePose.


        :return: The is_accurate of this AccuratePose.
        :rtype: bool
        """
        return self._is_accurate

    @is_accurate.setter
    def is_accurate(self, is_accurate: bool):
        """Sets the is_accurate of this AccuratePose.


        :param is_accurate: The is_accurate of this AccuratePose.
        :type is_accurate: bool
        """
        if is_accurate is None:
            raise ValueError("Invalid value for `is_accurate`, must not be `None`")  # noqa: E501

        self._is_accurate = is_accurate

    @property
    def taken_at(self) -> datetime:
        """Gets the taken_at of this AccuratePose.


        :return: The taken_at of this AccuratePose.
        :rtype: datetime
        """
        return self._taken_at

    @taken_at.setter
    def taken_at(self, taken_at: datetime):
        """Sets the taken_at of this AccuratePose.


        :param taken_at: The taken_at of this AccuratePose.
        :type taken_at: datetime
        """
        if taken_at is None:
            raise ValueError("Invalid value for `taken_at`, must not be `None`")  # noqa: E501

        self._taken_at = taken_at

    @property
    def reference_scan(self) -> str:
        """Gets the reference_scan of this AccuratePose.

        Contents of the reference scan assembled as point cloud data following [RFC 4648 ยง 5](https://tools.ietf.org/html/rfc4648#section-5)  # noqa: E501

        :return: The reference_scan of this AccuratePose.
        :rtype: str
        """
        return self._reference_scan

    @reference_scan.setter
    def reference_scan(self, reference_scan: str):
        """Sets the reference_scan of this AccuratePose.

        Contents of the reference scan assembled as point cloud data following [RFC 4648 ยง 5](https://tools.ietf.org/html/rfc4648#section-5)  # noqa: E501

        :param reference_scan: The reference_scan of this AccuratePose.
        :type reference_scan: str
        """
        if reference_scan is None:
            raise ValueError("Invalid value for `reference_scan`, must not be `None`")  # noqa: E501

        self._reference_scan = reference_scan
