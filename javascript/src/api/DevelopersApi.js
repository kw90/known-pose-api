/**
 * Known Pose API
 * Define and retrieve (accurate) semantic poses in a 2D environment. This version is a workaround for some not yet available features of the OpenAPI Specification v3.0 (e.g. `anyOf` as a response type and adding a  `discriminator` for supporting polymorphism/composition). Therefore, ATM the sub-components BasicPose and InaccuratePose are reference objects inside their respective parent model.  
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: Kai.Waelti@dfki.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccuratePoseArray from '../model/AccuratePoseArray';
import BasicPose from '../model/BasicPose';
import InaccuratePoseArray from '../model/InaccuratePoseArray';
import InlineResponse200 from '../model/InlineResponse200';

/**
* Developers service.
* @module api/DevelopersApi
* @version 1.1.10
*/
export default class DevelopersApi {

    /**
    * Constructs a new DevelopersApi. 
    * @alias module:api/DevelopersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAccuratePose operation.
     * @callback module:api/DevelopersApi~addAccuratePoseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds an accurate pose item
     * Adds an accurate pose to the system. Just give the Pose a name. 
     * @param {Object} opts Optional parameters
     * @param {module:model/BasicPose} opts.basicPose Optional pose item to add
     * @param {module:api/DevelopersApi~addAccuratePoseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addAccuratePose(opts, callback) {
      opts = opts || {};
      let postBody = opts['basicPose'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/poses/accurate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addInaccuratePose operation.
     * @callback module:api/DevelopersApi~addInaccuratePoseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * adds an inaccurate pose item
     * Adds an inaccurate pose to the system. Just give the Pose a name and optionally a Pose in the map to use. 
     * @param {Object} opts Optional parameters
     * @param {module:model/BasicPose} opts.basicPose Optional pose item to add
     * @param {module:api/DevelopersApi~addInaccuratePoseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addInaccuratePose(opts, callback) {
      opts = opts || {};
      let postBody = opts['basicPose'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/poses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the posesIdDelete operation.
     * @callback module:api/DevelopersApi~posesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a pose item
     * Deletes an accurate or inaccurate pose from the system using the `uuid`. 
     * @param {String} id uuid
     * @param {module:api/DevelopersApi~posesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    posesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling posesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/poses/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAccuratePose operation.
     * @callback module:api/DevelopersApi~searchAccuratePoseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccuratePoseArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches accurate pose
     * By passing in the appropriate options, you can search for defined accurate semantic poses in the environment 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id optional uuid of a single accurate pose to be returned
     * @param {String} opts.searchString pass an optional search string for looking up a pose
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/DevelopersApi~searchAccuratePoseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccuratePoseArray}
     */
    searchAccuratePose(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'search_string': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccuratePoseArray;
      return this.apiClient.callApi(
        '/poses/accurate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPose operation.
     * @callback module:api/DevelopersApi~searchPoseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InaccuratePoseArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches pose
     * By passing in the appropriate options, you can search for defined semantic poses in the environment 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id optional uuid of a single pose to be returned
     * @param {String} opts.searchString pass an optional search string for looking up a pose
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/DevelopersApi~searchPoseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InaccuratePoseArray}
     */
    searchPose(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'search_string': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InaccuratePoseArray;
      return this.apiClient.callApi(
        '/poses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
