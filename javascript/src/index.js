/**
 * Known Pose API
 * Define and retrieve (accurate) semantic poses in a 2D environment. This version is a workaround for some not yet available features of the OpenAPI Specification v3.0 (e.g. `anyOf` as a response type and adding a  `discriminator` for supporting polymorphism/composition). Therefore, ATM the sub-components BasicPose and InaccuratePose are reference objects inside their respective parent model.  
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: Kai.Waelti@dfki.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AccuratePose from './model/AccuratePose';
import AccuratePoseArray from './model/AccuratePoseArray';
import BasicPose from './model/BasicPose';
import InaccuratePose from './model/InaccuratePose';
import InaccuratePoseArray from './model/InaccuratePoseArray';
import InlineResponse200 from './model/InlineResponse200';
import Orientation from './model/Orientation';
import Position from './model/Position';
import DevelopersApi from './api/DevelopersApi';


/**
* Define_and_retrieve__accurate_semantic_poses_in_a_2D_environment__This_version_is_a_workaround_for_some_not_yet_available_features_of_the_OpenAPI_Specification_v3_0__e_g__anyOf_as_a_response_type_and_adding_a__discriminator_for_supporting_polymorphism_composition__Therefore_ATM_the_sub_components_BasicPose_and_InaccuratePose_are_reference_objects_inside_their_respective_parent_model__.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var KnownPoseClient = require('index'); // See note below*.
* var xxxSvc = new KnownPoseClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new KnownPoseClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new KnownPoseClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new KnownPoseClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.1.10
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AccuratePose model constructor.
     * @property {module:model/AccuratePose}
     */
    AccuratePose,

    /**
     * The AccuratePoseArray model constructor.
     * @property {module:model/AccuratePoseArray}
     */
    AccuratePoseArray,

    /**
     * The BasicPose model constructor.
     * @property {module:model/BasicPose}
     */
    BasicPose,

    /**
     * The InaccuratePose model constructor.
     * @property {module:model/InaccuratePose}
     */
    InaccuratePose,

    /**
     * The InaccuratePoseArray model constructor.
     * @property {module:model/InaccuratePoseArray}
     */
    InaccuratePoseArray,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The Orientation model constructor.
     * @property {module:model/Orientation}
     */
    Orientation,

    /**
     * The Position model constructor.
     * @property {module:model/Position}
     */
    Position,

    /**
    * The DevelopersApi service constructor.
    * @property {module:api/DevelopersApi}
    */
    DevelopersApi
};
