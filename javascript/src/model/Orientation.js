/**
 * Known Pose API
 * Define and retrieve (accurate) semantic poses in a 2D environment. This version is a workaround for some not yet available features of the OpenAPI Specification v3.0 (e.g. `anyOf` as a response type and adding a  `discriminator` for supporting polymorphism/composition). Therefore, ATM the sub-components BasicPose and InaccuratePose are reference objects inside their respective parent model.  
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: Kai.Waelti@dfki.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Orientation model module.
 * @module model/Orientation
 * @version 1.1.10
 */
class Orientation {
    /**
     * Constructs a new <code>Orientation</code>.
     * Orientation in free space in quaternion form.
     * @alias module:model/Orientation
     * @param x {Number} 
     * @param y {Number} 
     * @param z {Number} 
     * @param w {Number} 
     */
    constructor(x, y, z, w) { 
        
        Orientation.initialize(this, x, y, z, w);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, x, y, z, w) { 
        obj['x'] = x;
        obj['y'] = y;
        obj['z'] = z;
        obj['w'] = w;
    }

    /**
     * Constructs a <code>Orientation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Orientation} obj Optional instance to populate.
     * @return {module:model/Orientation} The populated <code>Orientation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Orientation();

            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
            if (data.hasOwnProperty('z')) {
                obj['z'] = ApiClient.convertToType(data['z'], 'Number');
            }
            if (data.hasOwnProperty('w')) {
                obj['w'] = ApiClient.convertToType(data['w'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} x
 */
Orientation.prototype['x'] = undefined;

/**
 * @member {Number} y
 */
Orientation.prototype['y'] = undefined;

/**
 * @member {Number} z
 */
Orientation.prototype['z'] = undefined;

/**
 * @member {Number} w
 */
Orientation.prototype['w'] = undefined;






export default Orientation;

