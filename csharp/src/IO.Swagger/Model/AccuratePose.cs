/* 
 * Known Pose API
 *
 * Define and retrieve (accurate) semantic poses in a 2D environment. This version is a workaround for some not yet available features of the OpenAPI Specification v3.0 (e.g. `anyOf` as a response type and adding a  `discriminator` for supporting polymorphism/composition). Therefore, ATM the sub-components BasicPose and InaccuratePose are reference objects inside their respective parent model.  
 *
 * OpenAPI spec version: 1.1.0
 * Contact: Kai.Waelti@dfki.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A unique and stamped accurate Pose in free space.
    /// </summary>
    [DataContract]
        public partial class AccuratePose :  IEquatable<AccuratePose>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccuratePose" /> class.
        /// </summary>
        /// <param name="inaccuratePose">inaccuratePose (required).</param>
        /// <param name="referenceScan">Contents of the reference scan assembled as point cloud data following [RFC 4648 ยง 5](https://tools.ietf.org/html/rfc4648#section-5) (required).</param>
        public AccuratePose(InaccuratePose inaccuratePose = default(InaccuratePose), string referenceScan = default(string))
        {
            // to ensure "inaccuratePose" is required (not null)
            if (inaccuratePose == null)
            {
                throw new InvalidDataException("inaccuratePose is a required property for AccuratePose and cannot be null");
            }
            else
            {
                this.InaccuratePose = inaccuratePose;
            }
            // to ensure "referenceScan" is required (not null)
            if (referenceScan == null)
            {
                throw new InvalidDataException("referenceScan is a required property for AccuratePose and cannot be null");
            }
            else
            {
                this.ReferenceScan = referenceScan;
            }
        }
        
        /// <summary>
        /// Gets or Sets InaccuratePose
        /// </summary>
        [DataMember(Name="inaccurate_pose", EmitDefaultValue=false)]
        public InaccuratePose InaccuratePose { get; set; }

        /// <summary>
        /// Contents of the reference scan assembled as point cloud data following [RFC 4648 ยง 5](https://tools.ietf.org/html/rfc4648#section-5)
        /// </summary>
        /// <value>Contents of the reference scan assembled as point cloud data following [RFC 4648 ยง 5](https://tools.ietf.org/html/rfc4648#section-5)</value>
        [DataMember(Name="reference_scan", EmitDefaultValue=false)]
        public string ReferenceScan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccuratePose {\n");
            sb.Append("  InaccuratePose: ").Append(InaccuratePose).Append("\n");
            sb.Append("  ReferenceScan: ").Append(ReferenceScan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccuratePose);
        }

        /// <summary>
        /// Returns true if AccuratePose instances are equal
        /// </summary>
        /// <param name="input">Instance of AccuratePose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccuratePose input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InaccuratePose == input.InaccuratePose ||
                    (this.InaccuratePose != null &&
                    this.InaccuratePose.Equals(input.InaccuratePose))
                ) && 
                (
                    this.ReferenceScan == input.ReferenceScan ||
                    (this.ReferenceScan != null &&
                    this.ReferenceScan.Equals(input.ReferenceScan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InaccuratePose != null)
                    hashCode = hashCode * 59 + this.InaccuratePose.GetHashCode();
                if (this.ReferenceScan != null)
                    hashCode = hashCode * 59 + this.ReferenceScan.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
